local M = {}

function M.start(modules)
    local config = modules.config
    local state = modules.state

    state.aiLoaded = true
    state.aiRunning = true
    state.gameConnected = false

    local Players = game:GetService("Players")
    local localPlayer = Players.LocalPlayer
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Sunfish = localPlayer:WaitForChild("PlayerScripts").AI:WaitForChild("Sunfish")
    local ChessLocalUI = localPlayer:WaitForChild("PlayerScripts"):WaitForChild("ChessLocalUI")

    local function getGameType(clockText)
        return config.CLOCK_NAME_MAPPING[clockText] or "unknown"
    end

    local function getSmartWait(clockText, moveCount)
        local configRange = config.CLOCK_WAIT_MAPPING[clockText]
        if not configRange then 
            configRange = config.CLOCK_WAIT_MAPPING["1:00"]
        end

        local baseWait = math.random(configRange.min, configRange.max)
        local gameType = getGameType(clockText)

        if moveCount < 5 then
            return baseWait * 0.25
        elseif moveCount < 20 then
            return (gameType ~= "bullet") and baseWait * 1.5 or baseWait * 0.8
        else
            return baseWait * 0.9
        end
    end

    local function getThinkTime()
        return 250
    end

    local function getFunction(funcName, moduleName)
        if state[funcName] then return state[funcName] end

        local retryCount = 0
        local func = nil

        while retryCount < 10 and not func do
            for _, f in ipairs(getgc(true)) do
                if typeof(f) == "function" then
                    local info = debug.getinfo(f, "nS")
                    if info.name == funcName and string.sub(info.source, -#moduleName) == moduleName then
                        func = f
                        break
                    end
                end
            end
            if not func then
                retryCount += 1
                task.wait(0.1)
            end
        end

        if not func then
            warn("Failed to find " .. funcName .. " after 10 retries.")
        else
            state[funcName] = func
        end

        return func
    end

    local function initializeFunctions()
        local GetBestMove = getFunction("GetBestMove", "Sunfish")
        local PlayMove = getFunction("PlayMove", "ChessLocalUI")
        return GetBestMove, PlayMove
    end

    local function startGameHandler(board)
        local GetBestMove, PlayMove = initializeFunctions()
        local boardLoaded = false
        local Fen = nil
        local move = nil
        local gameEnded = false
        local nbMoves = 0
        local randWaitFromGameType = 0
        local clockText = nil

        local isLocalWhite = localPlayer.Name == board.WhitePlayer.Value
        local clockLabel = board:WaitForChild("Clock")
            :WaitForChild("MainBody")
            :WaitForChild("SurfaceGui")
            :WaitForChild(isLocalWhite and "WhiteTime" or "BlackTime")

        task.wait(0.1)
        clockText = clockLabel.ContentText
        randWaitFromGameType = getSmartWait(clockText, nbMoves)
        boardLoaded = true

        local function isLocalPlayersTurn()
            return isLocalWhite == board.WhiteToPlay.Value
        end

        local function gameLoop()
            task.wait(3)

            while not gameEnded do
                if boardLoaded and board and board.FEN then
                    Fen = board.FEN.Value

                    if isLocalPlayersTurn() and Fen and state.aiRunning then
                        task.spawn(function()
                            local success, result = pcall(GetBestMove, nil, Fen, getThinkTime())

                            if success and result then
                                move = result
                                task.wait(randWaitFromGameType)
                                pcall(PlayMove, move)

                                nbMoves += 1
                                randWaitFromGameType = getSmartWait(clockText, nbMoves)
                            end
                        end)
                    end
                end
                task.wait(0.2)
            end
        end

        state.aiThread = coroutine.create(function()
            local ok, err = pcall(gameLoop)
            if not ok then
                warn("[AI Thread Error]:", err)
            end
        end)

        coroutine.resume(state.aiThread)

        ReplicatedStorage.Chess:WaitForChild("EndGameEvent").OnClientEvent:Once(function()
            gameEnded = true
            state.aiRunning = false
            state.gameConnected = false
            state.aiThread = nil
            print("[LOG]: Game ended.")
        end)
    end

    if not state.gameConnected then
        ReplicatedStorage.Chess:WaitForChild("StartGameEvent").OnClientEvent:Connect(function(board)
            if board then
                if localPlayer.Name == board.WhitePlayer.Value or localPlayer.Name == board.BlackPlayer.Value then
                    print("[LOG]: New game started.")
                    startGameHandler(board)
                end
            else
                warn("Invalid board, try restarting a chess game.")
            end
        end)
        state.gameConnected = true
    else
        warn("Game instance already existing, restart chess club")
    end
end

return M
